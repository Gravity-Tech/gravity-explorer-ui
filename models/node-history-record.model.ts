/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel } from './base-model';
import { SubTypeFactory } from './sub-type-factory';

import { IAsset, Asset } from './asset.model';

export interface INodeHistoryRecord {
    asset?: IAsset;
    name?: string;
    status?: number;
    time?: Date;
    type?: number;
}


export class NodeHistoryRecord extends BaseModel implements INodeHistoryRecord  {

    static ASSET_FIELD_NAME = 'asset';
    static NAME_FIELD_NAME = 'name';
    static STATUS_FIELD_NAME = 'status';
    static TIME_FIELD_NAME = 'time';
    static TYPE_FIELD_NAME = 'type';

    asset: Asset;
    name: string;
    status: number;
    time: Date;
    type: number;

    /**
     * constructor
     * @param values Can be used to set a webapi response or formValues to this newly constructed model
    * @useFormGroupValuesToModel if true use formValues
    */
    constructor(values?: Partial<INodeHistoryRecord>, useFormGroupValuesToModel = false) {
        super();
        this.asset = new Asset(); 

        if (values) {
            this.setValues(values, useFormGroupValuesToModel);
        }
    }

    /**
     * set the values.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: Partial<INodeHistoryRecord>, useFormGroupValuesToModel = false): void {
        if (values) {
            const rawValues = this.getValuesToUse(values, useFormGroupValuesToModel);
            this.asset.setValues(rawValues.asset, useFormGroupValuesToModel);
            this.name = this.getValue<string>(rawValues, NodeHistoryRecord.NAME_FIELD_NAME);
            this.status = this.getValue<number>(rawValues, NodeHistoryRecord.STATUS_FIELD_NAME);
            this.time = this.getValue<Date>(rawValues, NodeHistoryRecord.TIME_FIELD_NAME);
            this.type = this.getValue<number>(rawValues, NodeHistoryRecord.TYPE_FIELD_NAME);
            // set values in model properties for added formControls
            super.setValuesInAddedPropertiesOfAttachedFormControls(values, useFormGroupValuesToModel);
        }
    }

    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                asset: this.asset.$formGroup,
                name: new FormControl(this.name),
                status: new FormControl(this.status),
                time: new FormControl(this.time),
                type: new FormControl(this.type),
            });
        }
        return this._formGroup;
    }

    /**
     * set the FormGroup values to the model values.
    */
    setFormGroupValues() {
        this.asset.setFormGroupValues();
        this.$formGroup.controls[NodeHistoryRecord.NAME_FIELD_NAME].setValue(this.name);
        this.$formGroup.controls[NodeHistoryRecord.STATUS_FIELD_NAME].setValue(this.status);
        this.$formGroup.controls[NodeHistoryRecord.TIME_FIELD_NAME].setValue(this.time);
        this.$formGroup.controls[NodeHistoryRecord.TYPE_FIELD_NAME].setValue(this.type);
        // set formValues in added formControls
        super.setFormGroupValuesInAddedFormControls();
    }
}
