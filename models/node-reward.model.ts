/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel } from './base-model';
import { SubTypeFactory } from './sub-type-factory';


export interface INodeReward {
    amount?: number;
    currency?: string;
    decimals?: number;
    timestamp?: number;
}


export class NodeReward extends BaseModel implements INodeReward  {

    static AMOUNT_FIELD_NAME = 'amount';
    static CURRENCY_FIELD_NAME = 'currency';
    static DECIMALS_FIELD_NAME = 'decimals';
    static TIMESTAMP_FIELD_NAME = 'timestamp';

    amount: number;
    currency: string;
    decimals: number;
    timestamp: number;

    /**
     * constructor
     * @param values Can be used to set a webapi response or formValues to this newly constructed model
    * @useFormGroupValuesToModel if true use formValues
    */
    constructor(values?: Partial<INodeReward>, useFormGroupValuesToModel = false) {
        super();

        if (values) {
            this.setValues(values, useFormGroupValuesToModel);
        }
    }

    /**
     * set the values.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: Partial<INodeReward>, useFormGroupValuesToModel = false): void {
        if (values) {
            const rawValues = this.getValuesToUse(values, useFormGroupValuesToModel);
            this.amount = this.getValue<number>(rawValues, NodeReward.AMOUNT_FIELD_NAME);
            this.currency = this.getValue<string>(rawValues, NodeReward.CURRENCY_FIELD_NAME);
            this.decimals = this.getValue<number>(rawValues, NodeReward.DECIMALS_FIELD_NAME);
            this.timestamp = this.getValue<number>(rawValues, NodeReward.TIMESTAMP_FIELD_NAME);
            // set values in model properties for added formControls
            super.setValuesInAddedPropertiesOfAttachedFormControls(values, useFormGroupValuesToModel);
        }
    }

    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                amount: new FormControl(this.amount),
                currency: new FormControl(this.currency),
                decimals: new FormControl(this.decimals),
                timestamp: new FormControl(this.timestamp),
            });
        }
        return this._formGroup;
    }

    /**
     * set the FormGroup values to the model values.
    */
    setFormGroupValues() {
        this.$formGroup.controls[NodeReward.AMOUNT_FIELD_NAME].setValue(this.amount);
        this.$formGroup.controls[NodeReward.CURRENCY_FIELD_NAME].setValue(this.currency);
        this.$formGroup.controls[NodeReward.DECIMALS_FIELD_NAME].setValue(this.decimals);
        this.$formGroup.controls[NodeReward.TIMESTAMP_FIELD_NAME].setValue(this.timestamp);
        // set formValues in added formControls
        super.setFormGroupValuesInAddedFormControls();
    }
}
