/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
 */
/* tslint:disable */
import {
  Validators,
  FormControl,
  FormGroup,
  FormArray,
  ValidatorFn,
} from '@angular/forms'
import {
  minValueValidator,
  maxValueValidator,
  enumValidator,
} from './validators'
import { BaseModel } from './base-model'
import { SubTypeFactory } from './sub-type-factory'

import { IIExtractor, IExtractor } from './i-extractor.model'
import { INode, Node } from './node.model'

export interface INebula {
  description: string
  extractor?: IIExtractor
  name: string
  nodes_using?: Array<INode>
  regularity: number
  score: number
  status: number
  subscription_fee?: number
  target_chain: number
}

export class Nebula extends BaseModel implements INebula {
  static DESCRIPTION_FIELD_NAME = 'description'
  static EXTRACTOR_FIELD_NAME = 'extractor'
  static NAME_FIELD_NAME = 'name'
  static NODES_USING_FIELD_NAME = 'nodes_using'
  static REGULARITY_FIELD_NAME = 'regularity'
  static SCORE_FIELD_NAME = 'score'
  static STATUS_FIELD_NAME = 'status'
  static SUBSCRIPTION_FEE_FIELD_NAME = 'subscription_fee'
  static TARGET_CHAIN_FIELD_NAME = 'target_chain'

  /** the description of the nebula */
  description: string
  extractor: IExtractor
  /** the name of the nebula */
  name: string
  nodes_using: Array<Node>
  /** Data feed subscription charge regularity
Represents minutes. For i.g. 1440 - one day */
  regularity: number
  /** the score of the nebula */
  score: number
  /** the status of the nebula */
  status: number
  subscription_fee: number
  /** the target chain of the nebula
recently allowed: WAVES, ETH */
  target_chain: number

  /**
   * constructor
   * @param values Can be used to set a webapi response or formValues to this newly constructed model
   * @useFormGroupValuesToModel if true use formValues
   */
  constructor(values?: Partial<INebula>, useFormGroupValuesToModel = false) {
    super()
    this.extractor = new IExtractor()
    this.nodes_using = new Array<Node>()

    if (values) {
      this.setValues(values, useFormGroupValuesToModel)
    }
  }

  /**
   * set the values.
   * @param values Can be used to set a webapi response to this newly constructed model
   */
  setValues(values: Partial<INebula>, useFormGroupValuesToModel = false): void {
    if (values) {
      const rawValues = this.getValuesToUse(values, useFormGroupValuesToModel)
      this.description = this.getValue<string>(
        rawValues,
        Nebula.DESCRIPTION_FIELD_NAME
      )
      this.extractor.setValues(rawValues.extractor, useFormGroupValuesToModel)
      this.name = this.getValue<string>(rawValues, Nebula.NAME_FIELD_NAME)
      this.fillModelArray<INode>(
        this,
        Nebula.NODES_USING_FIELD_NAME,
        rawValues.nodes_using,
        useFormGroupValuesToModel,
        Node,
        SubTypeFactory.createSubTypeInstance
      )
      this.regularity = this.getValue<number>(
        rawValues,
        Nebula.REGULARITY_FIELD_NAME
      )
      this.score = this.getValue<number>(rawValues, Nebula.SCORE_FIELD_NAME)
      this.status = this.getValue<number>(rawValues, Nebula.STATUS_FIELD_NAME)
      this.subscription_fee = this.getValue<number>(
        rawValues,
        Nebula.SUBSCRIPTION_FEE_FIELD_NAME
      )
      this.target_chain = this.getValue<number>(
        rawValues,
        Nebula.TARGET_CHAIN_FIELD_NAME
      )
      // set values in model properties for added formControls
      super.setValuesInAddedPropertiesOfAttachedFormControls(
        values,
        useFormGroupValuesToModel
      )
    }
  }

  protected getFormGroup(): FormGroup {
    if (!this._formGroup) {
      this._formGroup = new FormGroup({
        description: new FormControl(this.description, [Validators.required]),
        extractor: this.extractor.$formGroup,
        name: new FormControl(this.name, [Validators.required]),
        nodes_using: new FormArray([]),
        regularity: new FormControl(this.regularity, [Validators.required]),
        score: new FormControl(this.score, [Validators.required]),
        status: new FormControl(this.status, [Validators.required]),
        subscription_fee: new FormControl(this.subscription_fee),
        target_chain: new FormControl(this.target_chain, [Validators.required]),
      })
      // generate FormArray control elements
      this.fillFormArray<Node>(
        Nebula.NODES_USING_FIELD_NAME,
        this.nodes_using,
        Node
      )
    }
    return this._formGroup
  }

  /**
   * set the FormGroup values to the model values.
   */
  setFormGroupValues() {
    this.$formGroup.controls[Nebula.DESCRIPTION_FIELD_NAME].setValue(
      this.description
    )
    this.extractor.setFormGroupValues()
    this.$formGroup.controls[Nebula.NAME_FIELD_NAME].setValue(this.name)
    this.fillFormArray<Node>(
      Nebula.NODES_USING_FIELD_NAME,
      this.nodes_using,
      Node
    )
    this.$formGroup.controls[Nebula.REGULARITY_FIELD_NAME].setValue(
      this.regularity
    )
    this.$formGroup.controls[Nebula.SCORE_FIELD_NAME].setValue(this.score)
    this.$formGroup.controls[Nebula.STATUS_FIELD_NAME].setValue(this.status)
    this.$formGroup.controls[Nebula.SUBSCRIPTION_FEE_FIELD_NAME].setValue(
      this.subscription_fee
    )
    this.$formGroup.controls[Nebula.TARGET_CHAIN_FIELD_NAME].setValue(
      this.target_chain
    )
    // set formValues in added formControls
    super.setFormGroupValuesInAddedFormControls()
  }
}
