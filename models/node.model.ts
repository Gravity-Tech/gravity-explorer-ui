/**
 * This file is generated by the SwaggerTSGenerator.
 * Do not edit.
*/
/* tslint:disable */
import { Validators, FormControl, FormGroup, FormArray, ValidatorFn } from '@angular/forms';
import { minValueValidator, maxValueValidator, enumValidator } from './validators';
import { BaseModel } from './base-model';
import { SubTypeFactory } from './sub-type-factory';

import { INodeContacts, NodeContacts } from './node-contacts.model';
import { INebula, Nebula } from './nebula.model';
import { INodeSocials, NodeSocials } from './node-socials.model';

export interface INode {
    contacts?: INodeContacts;
    deposit_amount?: number;
    deposit_chain?: number;
    description?: string;
    joined_at?: number;
    locked_until?: number;
    name?: string;
    nebulas_using?: Array<INebula>;
    score?: number;
    socials?: INodeSocials;
}


export class Node extends BaseModel implements INode  {

    static CONTACTS_FIELD_NAME = 'contacts';
    static DEPOSIT_AMOUNT_FIELD_NAME = 'deposit_amount';
    static DEPOSIT_CHAIN_FIELD_NAME = 'deposit_chain';
    static DESCRIPTION_FIELD_NAME = 'description';
    static JOINED_AT_FIELD_NAME = 'joined_at';
    static LOCKED_UNTIL_FIELD_NAME = 'locked_until';
    static NAME_FIELD_NAME = 'name';
    static NEBULAS_USING_FIELD_NAME = 'nebulas_using';
    static SCORE_FIELD_NAME = 'score';
    static SOCIALS_FIELD_NAME = 'socials';

    contacts: NodeContacts;
    deposit_amount: number;
    deposit_chain: number;
    description: string;
    joined_at: number;
    locked_until: number;
    name: string;
    nebulas_using: Array<Nebula>;
    score: number;
    socials: NodeSocials;

    /**
     * constructor
     * @param values Can be used to set a webapi response or formValues to this newly constructed model
    * @useFormGroupValuesToModel if true use formValues
    */
    constructor(values?: Partial<INode>, useFormGroupValuesToModel = false) {
        super();
        this.contacts = new NodeContacts(); 
        this.nebulas_using = new Array<Nebula>(); 
        this.socials = new NodeSocials(); 

        if (values) {
            this.setValues(values, useFormGroupValuesToModel);
        }
    }

    /**
     * set the values.
     * @param values Can be used to set a webapi response to this newly constructed model
    */
    setValues(values: Partial<INode>, useFormGroupValuesToModel = false): void {
        if (values) {
            const rawValues = this.getValuesToUse(values, useFormGroupValuesToModel);
            this.contacts.setValues(rawValues.contacts, useFormGroupValuesToModel);
            this.deposit_amount = this.getValue<number>(rawValues, Node.DEPOSIT_AMOUNT_FIELD_NAME);
            this.deposit_chain = this.getValue<number>(rawValues, Node.DEPOSIT_CHAIN_FIELD_NAME);
            this.description = this.getValue<string>(rawValues, Node.DESCRIPTION_FIELD_NAME);
            this.joined_at = this.getValue<number>(rawValues, Node.JOINED_AT_FIELD_NAME);
            this.locked_until = this.getValue<number>(rawValues, Node.LOCKED_UNTIL_FIELD_NAME);
            this.name = this.getValue<string>(rawValues, Node.NAME_FIELD_NAME);
            this.fillModelArray<INebula>(this, Node.NEBULAS_USING_FIELD_NAME, rawValues.nebulas_using, useFormGroupValuesToModel, Nebula, SubTypeFactory.createSubTypeInstance);
            this.score = this.getValue<number>(rawValues, Node.SCORE_FIELD_NAME);
            this.socials.setValues(rawValues.socials, useFormGroupValuesToModel);
            // set values in model properties for added formControls
            super.setValuesInAddedPropertiesOfAttachedFormControls(values, useFormGroupValuesToModel);
        }
    }

    protected getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup({
                contacts: this.contacts.$formGroup,
                deposit_amount: new FormControl(this.deposit_amount),
                deposit_chain: new FormControl(this.deposit_chain),
                description: new FormControl(this.description),
                joined_at: new FormControl(this.joined_at),
                locked_until: new FormControl(this.locked_until),
                name: new FormControl(this.name),
                nebulas_using: new FormArray([]),
                score: new FormControl(this.score),
                socials: this.socials.$formGroup,
            });
            // generate FormArray control elements
            this.fillFormArray<Nebula>(Node.NEBULAS_USING_FIELD_NAME, this.nebulas_using, Nebula);
        }
        return this._formGroup;
    }

    /**
     * set the FormGroup values to the model values.
    */
    setFormGroupValues() {
        this.contacts.setFormGroupValues();
        this.$formGroup.controls[Node.DEPOSIT_AMOUNT_FIELD_NAME].setValue(this.deposit_amount);
        this.$formGroup.controls[Node.DEPOSIT_CHAIN_FIELD_NAME].setValue(this.deposit_chain);
        this.$formGroup.controls[Node.DESCRIPTION_FIELD_NAME].setValue(this.description);
        this.$formGroup.controls[Node.JOINED_AT_FIELD_NAME].setValue(this.joined_at);
        this.$formGroup.controls[Node.LOCKED_UNTIL_FIELD_NAME].setValue(this.locked_until);
        this.$formGroup.controls[Node.NAME_FIELD_NAME].setValue(this.name);
        this.fillFormArray<Nebula>(Node.NEBULAS_USING_FIELD_NAME, this.nebulas_using, Nebula);
        this.$formGroup.controls[Node.SCORE_FIELD_NAME].setValue(this.score);
        this.socials.setFormGroupValues();
        // set formValues in added formControls
        super.setFormGroupValuesInAddedFormControls();
    }
}
