/**
 * Gravity Node API.
 * the purpose of this application is to provide an application that is using plain go code to define an API
 *
 * OpenAPI spec version: 1.0
 * Contact: shamil@venlab.dev
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { Nebula } from '../model/nebula';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class NebulasService {

    protected basePath = 'http://node.gravityhub.org:8090/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Returns all available gravity nebulas
     * This will show all available gravity nebulas
     * @param q a QueryParam acts like a search string for fields. Use as a regexp expression.
     * @param page a CurrentPageParam represents current page Only positive integers allowed. Default is 1
     * @param items an ItemsPerPageParam represents items count per page Only positive integers allowed. Default is 12
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllNebulas(q?: string, page?: number, items?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Nebula>>;
    public getAllNebulas(q?: string, page?: number, items?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Nebula>>>;
    public getAllNebulas(q?: string, page?: number, items?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Nebula>>>;
    public getAllNebulas(q?: string, page?: number, items?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (q !== undefined && q !== null) {
            queryParameters = queryParameters.set('q', <any>q);
        }
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (items !== undefined && items !== null) {
            queryParameters = queryParameters.set('items', <any>items);
        }

        let headers = this.defaultHeaders;

        // authentication (api_key) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["KEY"]) {
            headers = headers.set('KEY', this.configuration.apiKeys["KEY"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Nebula>>('get',`${this.basePath}/nebulas/all`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
